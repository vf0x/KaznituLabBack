// <auto-generated />
using System;
using EFData.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFData.Migrations
{
    [DbContext(typeof(KaznituLabContext))]
    [Migration("20210228220335_test22")]
    partial class test22
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.1.21102.2")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFData.Entity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EFData.Entity.BibliographicDbType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BibliographicDbTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Title = "Scopus"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Title = "WoS"
                        });
                });

            modelBuilder.Entity("EFData.Entity.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Title = "₸ KZT"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Title = "$ USD"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Title = "₽ RUB"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Title = "€ EUR"
                        });
                });

            modelBuilder.Entity("EFData.Entity.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmbientTemperature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateOfConformity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Destinations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerVoltage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativeHumidity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyFuses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentStatusId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("EFData.Entity.EquipmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Title = "Исправное"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Title = "Техобслуживание"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Title = "Ремонт"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Title = "Списание"
                        });
                });

            modelBuilder.Entity("EFData.Entity.EquipmentTechnicalMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAfterMaintenance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<bool>("ServicePassed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentTechnicalMaintenances");
                });

            modelBuilder.Entity("EFData.Entity.FinancingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FinancingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Title = "Заём"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Title = "Кредит"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Title = "Ссуда"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Title = "Аренда"
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Title = "Пожертвование, Дарение"
                        },
                        new
                        {
                            Id = 6,
                            Deleted = false,
                            Title = "Субсидия"
                        },
                        new
                        {
                            Id = 7,
                            Deleted = false,
                            Title = "Субвенция"
                        },
                        new
                        {
                            Id = 8,
                            Deleted = false,
                            Title = "Дотация"
                        },
                        new
                        {
                            Id = 9,
                            Deleted = false,
                            Title = "Грант"
                        });
                });

            modelBuilder.Entity("EFData.Entity.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accreditation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryPhotoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LaboratoryStatusId")
                        .HasColumnType("int");

                    b.Property<string>("LocationPhotoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionLaboratory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryStatusId");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("EFData.Entity.LaboratoryEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("LaboratoryEmployees");
                });

            modelBuilder.Entity("EFData.Entity.LaboratoryEqiupment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("LaboratoryEqiupments");
                });

            modelBuilder.Entity("EFData.Entity.LaboratoryService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("LaboratoryServices");
                });

            modelBuilder.Entity("EFData.Entity.LaboratoryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LaboratoryStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Title = "Действует"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Title = "Не Действует"
                        });
                });

            modelBuilder.Entity("EFData.Entity.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEndPlaned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HaveBudget")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestBudget")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("StagesCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStatusId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EFData.Entity.ProjectCertificateRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CopyrightHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCertificateRegistrations");
                });

            modelBuilder.Entity("EFData.Entity.ProjectContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ContractСonclusions")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidityPriod")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectContracts");
                });

            modelBuilder.Entity("EFData.Entity.ProjectCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCustomers");
                });

            modelBuilder.Entity("EFData.Entity.ProjectEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEmployees");
                });

            modelBuilder.Entity("EFData.Entity.ProjectFunding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("FinancingTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFundings");
                });

            modelBuilder.Entity("EFData.Entity.ProjectFundingCoFinancing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectFundingId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("ProjectFundingId");

                    b.ToTable("ProjectFundingCoFinancings");
                });

            modelBuilder.Entity("EFData.Entity.ProjectFundingStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectFundingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFundingId");

                    b.ToTable("ProjectFundingStages");
                });

            modelBuilder.Entity("EFData.Entity.ProjectPatent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyrightHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TeretoryFacilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPatents");
                });

            modelBuilder.Entity("EFData.Entity.ProjectRevenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectRevenues");
                });

            modelBuilder.Entity("EFData.Entity.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Title = "Действует"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Title = "Не Действует"
                        });
                });

            modelBuilder.Entity("EFData.Entity.QueryDictionary", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("view_name_that_doesnt_exist");
                });

            modelBuilder.Entity("EFData.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EFData.Entity.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Doi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Essn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PublishedMonRK")
                        .HasColumnType("bit");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("SourceTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("EFData.Entity.WorkBibliographicDbType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BibliographicDbTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BibliographicDbTypeId");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkBibliographicDbTypes");
                });

            modelBuilder.Entity("EFData.Entity.WorkCoAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("FromSU")
                        .HasColumnType("bit");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkCoAuthors");
                });

            modelBuilder.Entity("EFData.Entity.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Title = "Научная статья"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Title = "Реферат"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Title = "Доклад"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Title = "Депонированная статья"
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Title = "Сборник научных трудов"
                        },
                        new
                        {
                            Id = 6,
                            Deleted = false,
                            Title = "Учебник"
                        },
                        new
                        {
                            Id = 7,
                            Deleted = false,
                            Title = "Монография"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "95FEE468-4DA9-40F6-AACB-42951BBABAF9",
                            ConcurrencyStamp = "436ce330-77ce-4f20-8fd5-ce707c49955d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("EFData.Entity.AppUser", b =>
                {
                    b.HasOne("EFData.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFData.Entity.Equipment", b =>
                {
                    b.HasOne("EFData.Entity.EquipmentStatus", "EquipmentStatus")
                        .WithMany()
                        .HasForeignKey("EquipmentStatusId");

                    b.Navigation("EquipmentStatus");
                });

            modelBuilder.Entity("EFData.Entity.EquipmentTechnicalMaintenance", b =>
                {
                    b.HasOne("EFData.Entity.Equipment", "Equipment")
                        .WithMany("EquipmentTechnicalMaintenances")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("EFData.Entity.Laboratory", b =>
                {
                    b.HasOne("EFData.Entity.LaboratoryStatus", "LaboratoryStatus")
                        .WithMany()
                        .HasForeignKey("LaboratoryStatusId");

                    b.Navigation("LaboratoryStatus");
                });

            modelBuilder.Entity("EFData.Entity.LaboratoryEmployee", b =>
                {
                    b.HasOne("EFData.Entity.Laboratory", "Laboratory")
                        .WithMany("LaboratoryEmployees")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("EFData.Entity.LaboratoryEqiupment", b =>
                {
                    b.HasOne("EFData.Entity.Equipment", "Equipment")
                        .WithMany("LaboratoryEqiupments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFData.Entity.Laboratory", "Laboratory")
                        .WithMany("LaboratoryEqiupments")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("EFData.Entity.LaboratoryService", b =>
                {
                    b.HasOne("EFData.Entity.Laboratory", "Laboratory")
                        .WithMany("LaboratoryServices")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("EFData.Entity.Project", b =>
                {
                    b.HasOne("EFData.Entity.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("EFData.Entity.ProjectCertificateRegistration", b =>
                {
                    b.HasOne("EFData.Entity.Project", "Project")
                        .WithMany("ProjectCertificateRegistrations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EFData.Entity.ProjectContract", b =>
                {
                    b.HasOne("EFData.Entity.Project", "Project")
                        .WithMany("ProjectContracts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EFData.Entity.ProjectCustomer", b =>
                {
                    b.HasOne("EFData.Entity.Project", "Project")
                        .WithMany("ProjectCustomers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EFData.Entity.ProjectEmployee", b =>
                {
                    b.HasOne("EFData.Entity.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EFData.Entity.ProjectFunding", b =>
                {
                    b.HasOne("EFData.Entity.CurrencyType", "CurrencyType")
                        .WithMany()
                        .HasForeignKey("CurrencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFData.Entity.FinancingType", "FinancingType")
                        .WithMany()
                        .HasForeignKey("FinancingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFData.Entity.Project", "Project")
                        .WithMany("ProjectFundings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyType");

                    b.Navigation("FinancingType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EFData.Entity.ProjectFundingCoFinancing", b =>
                {
                    b.HasOne("EFData.Entity.CurrencyType", "CurrencyType")
                        .WithMany()
                        .HasForeignKey("CurrencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFData.Entity.ProjectFunding", "ProjectFunding")
                        .WithMany("ProjectFundingCoFinancings")
                        .HasForeignKey("ProjectFundingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyType");

                    b.Navigation("ProjectFunding");
                });

            modelBuilder.Entity("EFData.Entity.ProjectFundingStage", b =>
                {
                    b.HasOne("EFData.Entity.ProjectFunding", "ProjectFunding")
                        .WithMany("ProjectFundingStages")
                        .HasForeignKey("ProjectFundingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectFunding");
                });

            modelBuilder.Entity("EFData.Entity.ProjectPatent", b =>
                {
                    b.HasOne("EFData.Entity.Project", "Project")
                        .WithMany("ProjectPatents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EFData.Entity.ProjectRevenue", b =>
                {
                    b.HasOne("EFData.Entity.Project", "Project")
                        .WithMany("ProjectRevenues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EFData.Entity.Work", b =>
                {
                    b.HasOne("EFData.Entity.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("EFData.Entity.WorkBibliographicDbType", b =>
                {
                    b.HasOne("EFData.Entity.BibliographicDbType", "BibliographicDbType")
                        .WithMany()
                        .HasForeignKey("BibliographicDbTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFData.Entity.Work", "Work")
                        .WithMany("WorkBibliographicDbTypes")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BibliographicDbType");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFData.Entity.WorkCoAuthor", b =>
                {
                    b.HasOne("EFData.Entity.Work", "Work")
                        .WithMany("WorkCoAuthors")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFData.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFData.Entity.Equipment", b =>
                {
                    b.Navigation("EquipmentTechnicalMaintenances");

                    b.Navigation("LaboratoryEqiupments");
                });

            modelBuilder.Entity("EFData.Entity.Laboratory", b =>
                {
                    b.Navigation("LaboratoryEmployees");

                    b.Navigation("LaboratoryEqiupments");

                    b.Navigation("LaboratoryServices");
                });

            modelBuilder.Entity("EFData.Entity.Project", b =>
                {
                    b.Navigation("ProjectCertificateRegistrations");

                    b.Navigation("ProjectContracts");

                    b.Navigation("ProjectCustomers");

                    b.Navigation("ProjectEmployees");

                    b.Navigation("ProjectFundings");

                    b.Navigation("ProjectPatents");

                    b.Navigation("ProjectRevenues");
                });

            modelBuilder.Entity("EFData.Entity.ProjectFunding", b =>
                {
                    b.Navigation("ProjectFundingCoFinancings");

                    b.Navigation("ProjectFundingStages");
                });

            modelBuilder.Entity("EFData.Entity.Work", b =>
                {
                    b.Navigation("WorkBibliographicDbTypes");

                    b.Navigation("WorkCoAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
